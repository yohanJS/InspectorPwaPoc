@page "/image-text-scanner"
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.Components.Forms
@inject HttpClient Http

<MudPaper Class="pa-4 mt-4" Style="max-width:400px; margin:auto;">
    <MudText Typo="Typo.h6" Class="mb-2">Extract Text from Image</MudText>
    <MudStack Spacing="2">
        <InputFile OnChange="OnFileSelected" accept="image/*" capture="environment" />

        <MudText Typo="Typo.body2" Class="mt-1 mb-1" Align="Align.Center">or</MudText>

        <MudTextField @bind-Value="imageUriInput"
                      Label="Paste Image URL"
                      Variant="Variant.Outlined"
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Link"
                      Immediate="true"
                      OnInput="OnUriInput"
                      Disabled="isLoading"
                      Class="w-100" />

        @if (selectedFile != null)
        {
            <MudText Typo="Typo.body2">Selected: @selectedFile.Name</MudText>
        }
        @if (!string.IsNullOrWhiteSpace(imageUriInput) && selectedFile == null)
        {
            <MudText Typo="Typo.body2">Image URL: @imageUriInput</MudText>
        }

        @if (isLoading)
        {
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Medium" Class="mx-auto" />
        }
        else
        {
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       Disabled="@( !CanSend )"
                       OnClick="SendImageAsync"
                       Class="w-100">
                Upload Image
            </MudButton>
        }

        @if (!string.IsNullOrEmpty(imagePreview))
        {
            <img src="@imagePreview" style="max-width:100%;max-height:200px;border-radius:8px;" />
        }
        @if (!string.IsNullOrEmpty(extractedText))
        {
            <MudText Typo="Typo.body2" Class="mt-2"><b>Extracted Text:</b><br />@extractedText</MudText>
        }
        @if (!string.IsNullOrEmpty(error))
        {
            <MudText Color="Color.Error">@error</MudText>
        }
    </MudStack>
</MudPaper>

@code {
    IBrowserFile? selectedFile;
    string? imagePreview;
    string? extractedText;
    string? error;
    bool isLoading = false;
    string? imageUriInput;

    bool isFileSelected => selectedFile != null;
    bool isUriValid => !string.IsNullOrWhiteSpace(imageUriInput) && Uri.IsWellFormedUriString(imageUriInput, UriKind.Absolute);
    bool CanSend => (isFileSelected || isUriValid) && !isLoading;

    // Cloudflare response class
    public class CloudflareUploadResponse
    {
        public string Id { get; set; } = string.Empty;
        public string Filename { get; set; } = string.Empty;
        public List<string> Variants { get; set; } = new();
    }

    private async Task OnFileChange(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        error = null;
        extractedText = null;
        selectedFile = e.File;
        imageUriInput = null; // Clear URI if file is selected

        if (selectedFile is null)
        {
            imagePreview = null;
            return;
        }

        // Preview
        var buffer = new byte[selectedFile.Size];
        await selectedFile.OpenReadStream().ReadAsync(buffer);
        imagePreview = $"data:{selectedFile.ContentType};base64,{Convert.ToBase64String(buffer)}";
    }

    private void OnUriInput(ChangeEventArgs e)
    {
        // Clear file if URI is entered
        if (!string.IsNullOrWhiteSpace(imageUriInput))
        {
            selectedFile = null;
            imagePreview = imageUriInput;
        }
        else
        {
            imagePreview = null;
        }
    }

    private async Task SendImageAsync()
    {
        error = null;
        extractedText = null;
        isLoading = true;
        StateHasChanged();

        try
        {
            if (selectedFile == null) return;

            var content = new MultipartFormDataContent();
            var stream = selectedFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // 10MB
            content.Add(new StreamContent(stream), "file", selectedFile.Name);

            var sendImgResponse = await Http.PostAsync("https://engfuel.com/ImageUploader/UploadFile", content);

            var imageUriInput = string.Empty;

            if (sendImgResponse.IsSuccessStatusCode)
            {
                selectedFile = null;
                var iageResponse = await sendImgResponse.Content.ReadFromJsonAsync<CloudflareUploadResponse>();
                if (iageResponse != null && iageResponse.Variants.Count > 0)
                {
                    imageUriInput = iageResponse.Variants[0]; // Use the first variant URL
                    imagePreview = imageUriInput; // Update preview with the uploaded image URL
                }
                else
                {
                    error = "Image upload response is invalid.";
                }
            }
            else
            {
                Console.Error.WriteLine("Error uploading image.");
            }

            // Use imageUriInput (from the URL text field)
            var analyzeContent = new MultipartFormDataContent
            {
                { new StringContent(imageUriInput!), "imageUri" }
            };

            var response = await Http.PostAsync("https://engfuel.com/api/GoogleVision/analyze", analyzeContent);


            if (response.IsSuccessStatusCode)
            {
                extractedText = await response.Content.ReadAsStringAsync();
            }
            else
            {
                error = "Text extraction failed.";
            }
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        isLoading = false;
        StateHasChanged();
    }
}
